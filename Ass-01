//headers
#include <iostream>
#include <ctime>
#include <conio.h>
using namespace std;

//global variables
int board[4][4] = {0};
int score = 0;
int hiscore=0;

// gamboard function which displays gameboard status
void gameboard() {
    system("cls");
    cout << "Score: " << score <<" High score: " << hiscore << " Exit: e" <<endl;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j]!=0){
               printf("|%4d|",board[i][j]);
            }
            else{
                cout<<"|____|";
            }
        }
        cout << endl;
    }
}
///////////////////////////////////////////////////////////////////
// this function generates new numbers in empty spaces in gameboard
void new_tiles() {
	srand(time(0));
   int emptyspace_count=0,empty_space[16][2],newtile_pos,newtile_value;
   //calculating empty spaces (at that instance) everytime this function is called
   for (int i=0;i<4;i++){
        for (int j=0;j<4;j++){
        	if (board[i][j]==0){
			    empty_space[emptyspace_count][0]=i;
		        empty_space[emptyspace_count][1]=j;
			    emptyspace_count++;
			}
		}
	}
   //simple logic to find random empty space assigning that space to new numbers which will either be 2 or 4
   if (emptyspace_count>0){
   newtile_pos=rand()%emptyspace_count;
   int decision=rand()%2;
   if (decision==0){
   	newtile_value=2;
   }
   else{
   	newtile_value=4;
   }
   // updating global board numbers with new tile positions and value
   board[empty_space[newtile_pos][0]][empty_space[newtile_pos][1]]=newtile_value; 	
   }
}
///////////////////////////////////////////////////////////////////////
// this function multiplies tiles by 2 and only called if they merge/integrate and are equal
void integrate_tiles(int row, int col, int next_row, int next_col) {
    board[row][col] *= 2;
    board[next_row][next_col] = 0;
    score += board[row][col];
    if (hiscore<score){
		hiscore=score;
	}
}
////////////////////////////////////////////////////////////////
//this function actually moves tiles according to user input
bool tiles_movement(int row, int col) {
    bool moved = false;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            int next_row = i+row;
            int next_col = j+col;
            if (board[i][j]!=0 && next_row>=0 && next_row<4 && next_col>=0 && next_col<4) {
                if (board[next_row][next_col]==0) {
                    board[next_row][next_col]=board[i][j];
                    board[i][j]=0;
                    moved = true;
                } else if (board[i][j]==board[next_row][next_col]) {
                    integrate_tiles(i,j,next_row,next_col);
                    moved = true;
                }
            }
        }
        
    }
    return moved;
}
///////////////////////////////////////////////////////////////////
// this function takes valid user input 
void input_movement(){
    int input = _getch();
	int row,col;
    bool moved = false;
    if (input=='e'){
        exit(0);
    }
    switch (input) {
        case 72:  //up
            for (int i = 1; i < 4; i++) {
              	if (tiles_movement(-i,0)) {
					moved = true;	
				}
			}
			break;
        case 80:  //down
            for (int i = 1; i < 4; i++) {
                if (tiles_movement(i,0)) {
					moved = true;
				}
			}
            break;
        case 75:  //left
            for (int i = 1; i < 4; i++) {
                if (tiles_movement(0,-i)) {
					moved = true;
				}
            }
            break;
        case 77:  //right
            for (int i = 1; i < 4; i++) {
                if (tiles_movement(0,i)) {
					moved = true;
				}
            }
            break;
    }
    if (moved) {
        new_tiles();
    }
} 
///////////////////////////////////////////////////////////////////////////////// 
// this function checks if the game is over, it is also the condion for while loop in main()
bool is_game_over() {
for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
        if (board[i][j] == 0) {
            return false;
        }
        //checks if there are same value numbers in row, meaning if possible moves exits, if there are it will return false
        if (i < 4 - 1 && board[i][j] == board[i+1][j]) {
            return false;
        }
        //checks if there are same value numbers in column, meaning if possible moves exits, if there are it will return false
        if (j < 4 - 1 && board[i][j] == board[i][j+1]) {
            return false;
        }
    }
}
if (score==131072){
    cout<<"Congrats! you beat the game. Maximum Score reached";
    return true;
}
return true;
}
/////////////////////////////////////////////////////////////////
//this function displays main menu to user
void mainmenu(){
    cout << "======= Hello and welcome to 2048 game =======" << endl;
    cout << "======= Implemented by Faheem Mahmood =======" << endl;
    cout << "======= use arrow keys to move tiles =======" << endl;
    cout << "~ press any key to start the game but e to exit ~" << endl;
    char ent=_getch();
    while(!cin>>ent){
        cout<<"Invalid input";
        cin.clear();
        cin.ignore(CHAR_MAX,'\n');
    }
    if (ent=='e'){
        exit(0);
    }
}
//////////////////////////////////////////////////////////
//this function resets the gameboard it is called when user requestes another game after prev game is finished or over
void resetGameboard() {
    // Loop through each row and column of the gameboard
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            // Set the current cell to an empty space
            board[row][col] = 0;
        }
    }
}
